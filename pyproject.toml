[tool.poetry]
name = "anti-distraction-bot"
version = "0.1.0"
description = ""
authors = ["michael.sutherland <michael.sutherland@foundry.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
opencv-python-headless = "^4.8.1.78"
simpleaudio = "^1.0.4"
dlib = "^19.24.2"
opencv-contrib-python = "^4.8.1.78"
opencv-python = "^4.8.1.78"
ultralytics = "^8.0.227"
mypy = "^1.8.0"


[tool.poetry.group.dev.dependencies]
pyright = "^1.1.350"
ruff = "^0.2.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = true
python_version = "3.11"
files = ["app"]

[tool.pyright]
typeCheckingMode = "strict"
pythonVersion = "3.11"
include = ["app/"]

[tool.ruff]
include = ["pyproject.toml", "app/**/*.py"]
target-version = "py311"
line-length = 100

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 70

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # conflict with ruff format
    "ISC001", "COM812",
    # type hinting self/cls is superfluous
    "ANN101", "ANN102",
    # lots of arguments is ok as long as they're keyword arguments
    "PLR0913",
    # very silly rule, why would you want less informative exceptions
    "TRY003",
    # these exception rules are bad
    "EM",
    # relative imports are fine and good actually
    "TID252",
    # removing else would change the semantics if the return was removed
    "RET505", "RET506", "RET507", "RET508",
]

[tool.ruff.lint.pydocstyle]
convention = "google"
